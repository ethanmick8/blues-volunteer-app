{"ast":null,"code":"var _jsxFileName = \"/Users/ethanmick/Documents/cs4320/volunteer-project/blues-volunteer-app/client/src/components/ProtectedRoute.js\";\n// SWITCH AND REDIRECT USAGE (WASN'T WORKING)\n/* import React from 'react';\nimport { Route, Redirect } from 'react-router';\n\nconst ProtectedRoute = ({ component: Component, isAuthenticated, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (isAuthenticated) {\n          return <Component {...props} />;\n        } else {\n          return <Redirect to=\"/login\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute; */\n\n// ProtectedRoute.js\n/*import React from 'react';\nimport { Route, Navigate } from 'react-router';\n\nconst ProtectedRoute = ({ element: Component, isAuthenticated, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={(props) => {\n          if (isAuthenticated) {\n            return <Component {...props} />;\n          } else {\n            return <Navigate to=\"/login\" />;\n          }\n        }}\n      />\n    );\n  };  \n\nexport default ProtectedRoute; */\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = _ref => {\n  let {\n    isAuthenticated,\n    ...props\n  } = _ref;\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Route, {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","isAuthenticated","props","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/Users/ethanmick/Documents/cs4320/volunteer-project/blues-volunteer-app/client/src/components/ProtectedRoute.js"],"sourcesContent":["// SWITCH AND REDIRECT USAGE (WASN'T WORKING)\n/* import React from 'react';\nimport { Route, Redirect } from 'react-router';\n\nconst ProtectedRoute = ({ component: Component, isAuthenticated, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (isAuthenticated) {\n          return <Component {...props} />;\n        } else {\n          return <Redirect to=\"/login\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute; */\n\n// ProtectedRoute.js\n/*import React from 'react';\nimport { Route, Navigate } from 'react-router';\n\nconst ProtectedRoute = ({ element: Component, isAuthenticated, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={(props) => {\n          if (isAuthenticated) {\n            return <Component {...props} />;\n          } else {\n            return <Navigate to=\"/login\" />;\n          }\n        }}\n      />\n    );\n  };  \n\nexport default ProtectedRoute; */\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\n\nconst ProtectedRoute = ({ isAuthenticated, ...props }) => {\n  return isAuthenticated ? (\n    <Route {...props} />\n  ) : (\n    <Navigate to=\"/login\" />\n  );\n};\n\nexport default ProtectedRoute;\n\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGC,IAAA,IAAmC;EAAA,IAAlC;IAAEC,eAAe;IAAE,GAAGC;EAAM,CAAC,GAAAF,IAAA;EACnD,OAAOC,eAAe,gBACpBH,OAAA,CAACH,KAAK;IAAA,GAAKO;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAI,gBAEpBR,OAAA,CAACF,QAAQ;IAACW,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtB;AACH,CAAC;AAACE,EAAA,GANIT,cAAc;AAQpB,eAAeA,cAAc;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}